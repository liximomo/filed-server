#!/usr/bin/env node

const Express = require('express');
const program = require('commander');
const filedServer = require('../index');
const colors = require('colors');
const path = require('path');
const package = require('../package.json');

const viewPath = path.join(__dirname, '../views');

// 处理命令行参数
program
  .version(package.version)
  .option('-p, --port', 'listening port', parseInt)
  .option('-h, --host', 'host address')
  .parse(process.argv);

const port = program.port || 8060;
const host = program.host || '0.0.0.0';
const dir = program.args[0];

function getLocalIpAddress() {
  const os = require('os');
  const ifaces = os.networkInterfaces();
  const ips = [];
  Object.keys(ifaces).forEach(function (ifname) {

    ifaces[ifname].forEach(function (iface) {
      if ('IPv4' !== iface.family || iface.internal !== false) {
        // skip over internal (i.e. 127.0.0.1) and non-ipv4 addresses
        return;
      }
      ips.push(iface.address);
    });
  });
  return ips;
}

const getAvaliableAdress = host => {
  const address = [host];
  if (!['0.0.0.0', 'localhost', '127.0.0.1'].indexOf(host)) {
    return ['localhost'].concat(getLocalIpAddress());
  }
};

const error = (err, req, res, next) => {
  const softTab = '&#32;&#32;&#32;&#32;';
  let errTrace = '';
  if (process.env.NODE_ENV === 'development') {
    errTrace = `:<br><br><pre style="color:red">${softTab}${err.stack.replace(/\n/g, `<br>${softTab}`)}</pre>`;
    console.log(err);
  }
  res.status(500).send(`Server Error${errTrace}`);
};

// Initialize the Express App
const app = new Express();
app.set('view engine', 'pug');
app.set('views', viewPath);

const filedServerMiddelWare = filedServer({
  dir,
  dirProcesser: (req, res, next, dir) => {
    dir.children.sort((l, r) => l.name.localeCompare(r.name));
    res.render('page/file-list', { dir });
  }
});

app.use('/', (req, res, next) => {
  if (req.query.help !== undefined) {
    res.render('page/usage');
  } else {
    filedServerMiddelWare(req, res, next);
  }
});

app.use(error);

app.listen(port, host, (error) => {
  if (error) {
    throw error;
  }

  console.log(colors.yellow('app is running on:'));
  getAvaliableAdress(host).forEach(host => {
    console.log(colors.green(`  http://${host}:${port}`));
  });
  console.log(colors.yellow('looking for help?:'));
    console.log(colors.green(`  http://${host}:${port}?help`));
  console.log('Hit CTRL-C to stop the server');
});
